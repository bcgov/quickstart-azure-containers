name: .Terraform Deployer

on:
  workflow_call:
    inputs:
      ### Required
      environment_name:
        description: 'The name of the environment to deploy to'
        required: true
        default: 'dev'
        type: string
      command:
        description: 'The terragrunt command to run'
        required: true
        default: 'apply'
        type: string
      tag:
        description: 'The tag of the containers to deploy'
        default: 'latest'
        type: string
        required: false
      app_env:
        required: false
        type: string
        description: 'The APP env separates between Azure ENV and Actual APP, since Azure dev is where PR, and TEST is deployed'
      stack_prefix:
        required: true
        type: string
        description: 'The stack prefix to use for the resources'
      
      
env:
    TF_VERSION: 1.12.2
    TF_LOG: ERROR
    AZURE_REGION: Canada Central
permissions:
  id-token: write # This is required for requesting the JWT
  contents: write # This is required for actions/checkout
jobs:
 infra:
  environment: ${{ inputs.environment_name }}
  name: Terraform ${{inputs.command}}  ${{ inputs.environment_name }}
  runs-on: ubuntu-24.04
  steps:
    - name: Checkout
      uses: actions/checkout@v5
    
    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Image Tags
      id: image-tags
      shell: bash
      run: |
        API_IMAGE="ghcr.io/${{ github.repository }}/backend:${{ inputs.tag }}"
        FLYWAY_IMAGE="ghcr.io/${{ github.repository }}/migrations:${{ inputs.tag }}"
        FRONTEND_IMAGE="ghcr.io/${{ github.repository }}/frontend:${{ inputs.tag }}"
        
        echo "api-image=$API_IMAGE" >> $GITHUB_OUTPUT
        echo "flyway-image=$FLYWAY_IMAGE" >> $GITHUB_OUTPUT
        echo "frontend-image=$FRONTEND_IMAGE" >> $GITHUB_OUTPUT
    
    - name: Terraform Init
      working-directory: infra
      run: |
        # Initialize the Terraform backend
        terraform init \
          -backend-config="resource_group_name=${{ secrets.VNET_RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=${{ inputs.stack_prefix }}/${{ inputs.app_env }}/terraform.tfstate" \
          -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
          -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -backend-config="use_oidc=true"

    - name: Terraform ${{inputs.command}}
      working-directory: infra
      run: |
          # Run terraform with exporting all these env vars declared above with export TF_VAR_var_name
          export TF_VAR_target_env=${{ inputs.environment_name }}
          export TF_VAR_azure_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}
          export TF_VAR_azure_tenant_id=${{ secrets.AZURE_TENANT_ID }}
          export TF_VAR_vnet_resource_group_name=${{ secrets.VNET_RESOURCE_GROUP_NAME }}
          export TF_VAR_vnet_name=${{ secrets.VNET_NAME }}
          export TF_VAR_flyway_image=${{ steps.image-tags.outputs.flyway-image }}
          export TF_VAR_api_image=${{ steps.image-tags.outputs.api-image }}
          export TF_VAR_stack_prefix=${{ inputs.stack_prefix }}
          export TF_VAR_azure_client_id=${{ secrets.AZURE_CLIENT_ID }}
          export TF_VAR_repo_name=${{ github.event.repository.name }}
          export TF_VAR_frontend_image=${{ steps.image-tags.outputs.frontend-image }}
          export TF_VAR_app_env=${{ inputs.app_env }}
          export TF_VAR_app_name=${{ inputs.stack_prefix }}-${{ inputs.app_env }}
          export TF_VAR_enable_cloudbeaver=${{ vars.CLOUDBEAVER_ENABLED || false }}
          export TF_VAR_vnet_address_space=${{ secrets.VNET_ADDRESS_SPACE }}
          export TF_VAR_client_id=${{ secrets.AZURE_CLIENT_ID }}
          export TF_VAR_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}
          export TF_VAR_tenant_id=${{ secrets.AZURE_TENANT_ID }}
          export TF_VAR_resource_group_name=${{ github.event.repository.name }}-${{ inputs.app_env }}
          export TF_VAR_common_tags='{"environment":"${{ inputs.environment_name }}","stack_prefix":"${{ inputs.stack_prefix }}","app_env":"${{ inputs.app_env }}","repo_name":"${{ github.event.repository.name }}"}'
          # now run terraform command with conditional auto-approve
          if [[ "${{ inputs.command }}" == "apply" || "${{ inputs.command }}" == "destroy" ]]; then
            terraform ${{ inputs.command }} -auto-approve -input=false
          else
            terraform ${{ inputs.command }} -input=false
          fi
