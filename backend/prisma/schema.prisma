generator client {
  provider = "prisma-client-js"
  previewFeatures = ["metrics", "multiSchema"]
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "audit", "pies"]
}

model users {
  id    Decimal @id(map: "USER_PK") @default(dbgenerated("nextval('\"USER_SEQ\"'::regclass)")) @db.Decimal
  name  String  @db.VarChar(200)
  email String  @db.VarChar(200)
  
  @@schema("public")
}

// Audit schema tables
model logged_actions {
  id                   Int       @id @default(autoincrement())
  schema_name          String
  table_name           String
  db_user              String
  updated_by_username  String?
  action_timestamp     DateTime  @default(now()) @db.Timestamptz
  action               String
  original_data        Json?
  new_data            Json?

  @@map("logged_actions")
  @@schema("audit")
  @@index([schema_name], map: "logged_actions_schema_name_idx")
  @@index([table_name], map: "logged_actions_table_name_idx")
  @@index([action_timestamp], map: "logged_actions_action_timestamp_idx")
  @@index([action], map: "logged_actions_action_idx")
}

// PIES schema tables
model system {
  id         String   @id
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz
  created_by String?
  updated_by String?

  system_records system_record[]

  @@map("system")
  @@schema("pies")
}

model transaction {
  id         String   @id @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz
  created_by String?
  updated_by String?

  process_events  process_event[]
  record_linkages record_linkage[]

  @@map("transaction")
  @@schema("pies")
}

model version {
  id         String   @id
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz
  created_by String?
  updated_by String?

  codings      coding[]
  record_kinds record_kind[]

  @@map("version")
  @@schema("pies")
}

model coding {
  id          Int      @id @default(autoincrement())
  code        String
  code_system String
  version_id  String
  created_at  DateTime @default(now()) @db.Timestamptz
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz
  created_by  String?
  updated_by  String?

  version        version         @relation(fields: [version_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  process_events process_event[]

  @@unique([code, code_system, version_id], map: "coding_code_code_system_version_id_unique")
  @@index([code], map: "coding_code_idx")
  @@map("coding")
  @@schema("pies")
}

model record_kind {
  id         Int      @id @default(autoincrement())
  kind       String
  version_id String
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz
  created_by String?
  updated_by String?

  version        version         @relation(fields: [version_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  system_records system_record[]

  @@unique([version_id, kind], map: "record_kind_version_id_kind_unique")
  @@map("record_kind")
  @@schema("pies")
}

model system_record {
  id             Int      @id @default(autoincrement())
  system_id      String
  record_id      String
  record_kind_id Int
  created_at     DateTime @default(now()) @db.Timestamptz
  updated_at     DateTime @default(now()) @updatedAt @db.Timestamptz
  created_by     String?
  updated_by     String?

  system                        system           @relation(fields: [system_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  record_kind                   record_kind      @relation(fields: [record_kind_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  process_events                process_event[]
  record_linkages_as_source     record_linkage[] @relation("SourceSystemRecord")
  record_linkages_as_linked     record_linkage[] @relation("LinkedSystemRecord")

  @@unique([system_id, record_id], map: "system_record_system_id_record_id_unique")
  @@index([record_id], map: "system_record_record_id_idx")
  @@index([system_id], map: "system_record_system_id_idx")
  @@map("system_record")
  @@schema("pies")
}

model process_event {
  id                 Int       @id @default(autoincrement())
  transaction_id     String    @db.Uuid
  system_record_id   Int
  start_date         DateTime  @db.Date
  start_time         DateTime? @db.Timetz
  end_date           DateTime? @db.Date
  end_time           DateTime? @db.Timetz
  coding_id          Int
  status             String?
  status_code        String?
  status_description String?
  created_at         DateTime  @default(now()) @db.Timestamptz
  updated_at         DateTime  @default(now()) @updatedAt @db.Timestamptz
  created_by         String?
  updated_by         String?

  transaction    transaction   @relation(fields: [transaction_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  system_record  system_record @relation(fields: [system_record_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  coding         coding        @relation(fields: [coding_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([system_record_id], map: "process_event_system_record_id_idx")
  @@map("process_event")
  @@schema("pies")
}

model record_linkage {
  id                       Int      @id @default(autoincrement())
  transaction_id           String   @unique @db.Uuid
  system_record_id         Int
  linked_system_record_id  Int
  created_at               DateTime @default(now()) @db.Timestamptz
  updated_at               DateTime @default(now()) @updatedAt @db.Timestamptz
  created_by               String?
  updated_by               String?

  transaction               transaction   @relation(fields: [transaction_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  system_record             system_record @relation("SourceSystemRecord", fields: [system_record_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  linked_system_record      system_record @relation("LinkedSystemRecord", fields: [linked_system_record_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([system_record_id, linked_system_record_id], map: "record_linkage_forward_unique")
  @@unique([linked_system_record_id, system_record_id], map: "record_linkage_reverse_unique")
  @@index([system_record_id], map: "record_linkage_system_record_id_idx")
  @@index([linked_system_record_id], map: "record_linkage_linked_system_record_id_idx")
  @@map("record_linkage")
  @@schema("pies")
}
